http://redisdoc.com/

======================================================================================================================
Key
	Del key [key ...]   		删除给定的一个或多个 key.  不存在的 key 会被忽略。
	Exists key					检查给定 key 是否存在。
	RandomKey					从当前数据库中随机返回(不删除)一个 key 。
	Rename key newkey			将 key 改名为 newkey 。当 key 和 newkey 相同，或者 key 不存在时，返回一个错误。当 newkey 已经存在时， RENAME 命令将覆盖旧值。
	RenameNX key newkey			当且仅当 newkey 不存在时，将 key 改名为 newkey 。当 key 不存在时，返回一个错误。
	Type key					返回 key 所储存的值的类型。
	
	Keys pattern				查找所有符合给定模式 pattern 的 key 。
									KEYS * 匹配数据库中所有 key 。
									KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。
									KEYS h*llo 匹配 hllo 和 heeeeello 等。
									KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo 。
									特殊符号用 \ 隔开
									
									/*KEYS 的速度非常快，但在一个大的数据库中使用它仍然可能造成性能问题，如果你需要从一个数据集中查找特定的 key ，
									你最好还是用 Redis 的集合结构(set)来代替。*/
	

	Move key db					将当前数据库的 key 移动到给定的数据库 db 当中。
								如果当前数据库(源数据库)和给定数据库(目标数据库)有相同名字的给定 key ，或者 key 不存在于当前数据库，那么 MOVE 没有任何效果。
								因此，也可以利用这一特性，将 MOVE 当作锁(locking)原语(primitive)。
	
	
生存时间
	Expire key seconds  		为给定 key 设置生存时间，当 key 过期时(生存时间为 0 )，它会被自动删除。
	PExpire key milliseconds	这个命令和 EXPIRE 命令的作用类似，但是它以毫秒为单位设置 key 的生存时间，而不像 EXPIRE 命令那样，以秒为单位。
	ExpireAT key timestamp		EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置生存时间。不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。
	PExpireAt key milliseconds-timestamp
								这个命令和 EXPIREAT 命令类似，但它以毫秒为单位设置 key 的过期 unix 时间戳，而不是像 EXPIREAT 那样，以秒为单位。	
	Persist key					移除给定 key 的生存时间，将这个 key 从『易失的』(带生存时间 key )转换成『持久的』(一个不带生存时间、永不过期的 key )。
	PTTL key					这个命令类似于 TTL 命令，但它以毫秒为单位返回 key 的剩余生存时间，而不是像 TTL 命令那样，以秒为单位。
	TTL key						以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。
	
	
	Migrate 		迁移reids key
	Dump			序列化
	Restore key ttl serialized-value [REPLACE]
					反序列化
	Object			从内部察看给定 key 的 Redis 对象。

	排序
	Sort key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC | DESC] [ALPHA] [STORE destination]
	
	sort 默认排序数字， 字符串  SORT a_list ALPHA
	

======================================================================================================================
字符串 
	Append key value			如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。
								如果 key 不存在， APPEND 就简单地将给定 key 设为 value ，就像执行 SET key value 一样。
	Get key						返回 key 所关联的字符串值。如果 key 不存在那么返回特殊值 nil 。
	GetRange key start end		返回 key 中字符串值的子字符串，字符串的截取范围由 start 和 end 两个偏移量决定(包括 start 和 end 在内)。
								负数偏移量表示从字符串最后开始计数， -1 表示最后一个字符， -2 表示倒数第二个，以此类推。
								GETRANGE 通过保证子字符串的值域(range)不超过实际字符串的值域来处理超出范围的值域请求。
	GetSet key value			将给定 key 的值设为 value ，并返回 key 的旧值(old value)。当 key 存在但不是字符串类型时，返回一个错误。
	MGet key [key ...]			返回所有(一个或多个)给定 key 的值。如果给定的 key 里面，有某个 key 不存在，那么这个 key 返回特殊值 nil 。因此，该命令永不失败。
	MSet key value [key value ...]	同时设置一个或多个 key-value 对。
								如果某个给定 key 已经存在，那么 MSET 会用新值覆盖原来的旧值，如果这不是你所希望的效果，请考虑使用 MSETNX 命令：它只会在所有给定 key 都不存在的情况下进行设置操作。
								MSET 是一个原子性(atomic)操作，所有给定 key 都会在同一时间内被设置，某些给定 key 被更新而另一些给定 key 没有改变的情况，不可能发生。
	MSetNX key value [key value ...]	同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。
								即使只有一个给定 key 已存在， MSETNX 也会拒绝执行所有给定 key 的设置操作。
								MSETNX 是原子性的，因此它可以用作设置多个不同 key 表示不同字段(field)的唯一性逻辑对象(unique logic object)，所有字段要么全被设置，要么全不被设置。
								
	
	Set key value [EX seconds] [PX milliseconds] [NX|XX]   将字符串值 value 关联到 key 。 如果 key 已经持有其他值， SET 就覆写旧值，无视类型。
															对于某个原本带有生存时间（TTL）的键来说， 当 SET 命令成功在这个键上执行时， 这个键原有的 TTL 将被清除。
	PSetEX key milliseconds value  这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。
	SetEX key seconds value		将值 value 关联到 key ，并将 key 的生存时间设为 seconds (以秒为单位)。
	SetNX key value				将 key 的值设为 value ，当且仅当 key 不存在。若给定的 key 已经存在，则 SETNX 不做任何动作。SETNX 是『SET if Not eXists』(如果不存在，则 SET)的简写。
	StrLen key					返回 key 所储存的字符串值的长度。当 key 储存的不是字符串值时，返回一个错误。
	
Decr key						将 key 中储存的数字值减一。
DecrBy key decrement			将 key 所储存的值减去减量 decrement 。
Incr key						将 key 中储存的数字值增一。
IncrBy key increment			将 key 所储存的值加上增量 increment 。
IncrByFloat key increment		为 key 中所储存的值加上浮点数增量 increment 。
SetBit key offset value			对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。
GetBit key offset				对 key 所储存的字符串值，获取指定偏移量上的位(bit)。
BitCount key [start] [end]		计算给定字符串中，被设置为 1 的比特位的数量。
BitOP operation destkey key [key ...]	对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上。
BitField key [GET type offset] [SET type offset value] [INCRBY type offset increment] [OVERFLOW WRAP|SAT|FAIL]
SetRange key offset value	用 value 参数覆写(overwrite)给定 key 所储存的字符串值，从偏移量 offset 开始。不存在的 key 当作空白字符串处理。

======================================================================================================================

Hash 哈希表
	HDel key field [field ...]	删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略。
	HExists key field			查看哈希表 key 中，给定域 field 是否存在。
	HGet key field				返回哈希表 key 中给定域 field 的值。
	HGetAll key					返回哈希表 key 中，所有的域和值。在返回值里，紧跟每个域名(field name)之后是域的值(value)，所以返回值的长度是哈希表大小的两倍。
	HKeys key					返回哈希表 key 中的所有域。
	HLen key					返回哈希表 key 中域的数量。
	HMGet key field [field ...]	返回哈希表 key 中，一个或多个给定域的值。如果给定的域不存在于哈希表，那么返回一个 nil 值。
								因为不存在的 key 被当作一个空哈希表来处理，所以对一个不存在的 key 进行 HMGET 操作将返回一个只带有 nil 值的表。
	HMSet key field value [field value ...]		同时将多个 field-value (域-值)对设置到哈希表 key 中。此命令会覆盖哈希表中已存在的域。如果 key 不存在，一个空哈希表被创建并执行 HMSET 操作。
	HSet key field value		将哈希表 key 中的域 field 的值设为 value 。如果 key 不存在，一个新的哈希表被创建并进行 HSET 操作。如果域 field 已经存在于哈希表中，旧值将被覆盖。
	HSetNX key field value		将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在。若域 field 已经存在，该操作无效。
								如果 key 不存在，一个新哈希表被创建并执行 HSETNX 命令。
	HValS key					返回哈希表 key 中所有域的值。
	HStrLen key field			返回哈希表 key 中， 与给定域 field 相关联的值的字符串长度（string length）。如果给定的键或者域不存在， 那么命令返回 0 。
	
HIncrBy key field increment		为哈希表 key 中的域 field 的值加上增量 increment 。增量也可以为负数，相当于对给定域进行减法操作。
HIncrByFloat key field increment		为哈希表 key 中的域 field 加上浮点数增量 increment 。

======================================================================================================================

List（列表）
	Lindex key index			返回列表 key 中，下标为 index 的元素。
								下标(index)参数 start 和 stop 都以 0 为底，也就是说，以 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。
								你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。
								如果 key 不是列表类型，返回一个错误。
	LInsert key BEFORE|AFTER pivot value		将值 value 插入到列表 key 当中，位于值 pivot 之前或之后。当 pivot 不存在于列表 key 时，不执行任何操作
												当 key 不存在时， key 被视为空列表，不执行任何操作。如果 key 不是列表类型，返回一个错误。
	LLen key					返回列表 key 的长度。如果 key 不存在，则 key 被解释为一个空列表，返回 0 .如果 key 不是列表类型，返回一个错误。
	LRem key count value		根据参数 count 的值，移除列表中与参数 value 相等的元素。
								count 的值可以是以下几种：
										count > 0 : 从表头开始向表尾搜索，移除与 value 相等的元素，数量为 count 。
										count < 0 : 从表尾开始向表头搜索，移除与 value 相等的元素，数量为 count 的绝对值。
										count = 0 : 移除表中所有与 value 相等的值。
	LSet key index value		将列表 key 下标为 index 的元素的值设置为 value 。当 index 参数超出范围，或对一个空列表( key 不存在)进行 LSET 时，返回一个错误。
	
	LPop key					移除并返回列表 key 的头元素。
	LTrim key start stop		对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。
	LPush key value [value ...]	将一个或多个值 value 插入到列表 key 的表头。
								如果有多个 value 值，那么各个 value 值按从左到右的顺序依次插入到表头： 比如说，对空列表 mylist 执行命令 LPUSH mylist a b c ，列表
								的值将是 c b a ，这等同于原子性地执行 LPUSH mylist a 、 LPUSH mylist b 和 LPUSH mylist c 三个命令。
								如果 key 不存在，一个空列表会被创建并执行 LPUSH 操作。当 key 存在但不是列表类型时，返回一个错误。
	LPushX key value			将值 value 插入到列表 key 的表头，当且仅当 key 存在并且是一个列表。和 LPUSH 命令相反，当 key 不存在时， LPUSHX 命令什么也不做。


	RPop key					移除并返回列表 key 的尾元素。
	RPush key value [value ...]	将一个或多个值 value 插入到列表 key 的表尾(最右边)。
								如果有多个 value 值，那么各个 value 值按从左到右的顺序依次插入到表尾：比如对一个空列表 mylist 执行 RPUSH mylist a b c ，得出的结果列表为 a b c ，
								等同于执行命令 RPUSH mylist a 、 RPUSH mylist b 、 RPUSH mylist c 。如果 key 不存在，一个空列表会被创建并执行 RPUSH 操作。
								当 key 存在但不是列表类型时，返回一个错误。
	RPushX key value			将值 value 插入到列表 key 的表尾，当且仅当 key 存在并且是一个列表。和 RPUSH 命令相反，当 key 不存在时， RPUSHX 命令什么也不做。
	
	RPopLPush source destination	命令 RPOPLPUSH 在一个原子时间内，执行以下两个动作：
										将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
										将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
									如果 source 不存在，值 nil 被返回，并且不执行其他动作。
									如果 source 和 destination 相同，则列表中的表尾元素被移动到表头，并返回该元素，可以把这种特殊情况视作列表的旋转(rotation)操作。
								
	LRange key start stop		返回列表 key 中指定区间内的元素，区间以偏移量 start 和 stop 指定。（包含头与包含尾）
								下标(index)参数 start 和 stop 都以 0 为底，也就是说，以 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。
								你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。
	
	Sort a_list ALPHA           字符串迭代
	
BLPop key [key ...] timeout
BRPop key [key ...] timeout
BRPopLPush source destination timeout

======================================================================================================================

Set 集合
	SAdd key member [member ...]	将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略。
									假如 key 不存在，则创建一个只包含 member 元素作成员的集合。当 key 不是集合类型时，返回一个错误。
	SCard key					返回集合 key 的基数(集合中元素的数量)。
	SDiff key [key ...]			返回一个集合的全部成员，该集合是所有给定集合之间的差集。不存在的 key 被视为空集。
	SDIffStore destination key [key ...]	这个命令的作用和 SDIFF 类似，但它将结果保存到 destination 集合，而不是简单地返回结果集。
											如果 destination 集合已经存在，则将其覆盖。destination 可以是 key 本身。
	SInter key [key ...]		返回一个集合的全部成员，该集合是所有给定集合的交集。不存在的 key 被视为空集。
								当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。
	SInterStore destination key [key ...]	这个命令类似于 SINTER 命令，但它将结果保存到 destination 集合，而不是简单地返回结果集。
											如果 destination 集合已经存在，则将其覆盖。destination 可以是 key 本身。
	SISMember key member		判断 member 元素是否集合 key 的成员。
	SMembers key				返回集合 key 中的所有成员。不存在的 key 被视为空集合。
	SMove source destination member		将 member 元素从 source 集合移动到 destination 集合。SMOVE 是原子性操作。
										如果 source 集合不存在或不包含指定的 member 元素，则 SMOVE 命令不执行任何操作，仅返回 0 。
										否则， member 元素从 source 集合中被移除，并添加到 destination 集合中去。
										当 destination 集合已经包含 member 元素时， SMOVE 命令只是简单地将 source 集合中的 member 元素删除。
										当 source 或 destination 不是集合类型时，返回一个错误。
	SPop key					移除并返回集合中的一个随机元素。
	SRandMember key [count]		如果命令执行时，只提供了 key 参数，那么返回集合中的一个随机元素。
								从 Redis 2.6 版本开始， SRANDMEMBER 命令接受可选的 count 参数：
									如果 count 为正数，且小于集合基数，那么命令返回一个包含 count 个元素的数组，数组中的元素各不相同。如果 count 大于等于集合基数，那么返回整个集合。
									如果 count 为负数，那么命令返回一个数组，数组中的元素可能会重复出现多次，而数组的长度为 count 的绝对值。
	SRem key member [member ...]移除集合 key 中的一个或多个 member 元素，不存在的 member 元素会被忽略。当 key 不是集合类型，返回一个错误。
	SUnion key [key ...]		返回一个集合的全部成员，该集合是所有给定集合的并集。不存在的 key 被视为空集。
	SUnionStore destination key [key ...]	这个命令类似于 SUNION 命令，但它将结果保存到 destination 集合，而不是简单地返回结果集。
											如果 destination 已经存在，则将其覆盖。destination 可以是 key 本身。
	
======================================================================================================================	
	
SortedSet（有序集合） Zset
	ZAdd key score member [[score member] [score member] ...] 将一个或多个 member 元素及其 score 值加入到有序集 key 当中。
	                            如果某个 member 已经是有序集的成员，那么更新这个 member 的 score 值，并通过重新插入这个 member 元素，来保证该 member 在正确的位置上。
	                            score 值可以是整数值或双精度浮点数。如果 key 不存在，则创建一个空的有序集并执行 ZADD 操作。当 key 存在但不是有序集类型时，返回一个错误。
	ZCard key                   返回有序集 key 的基数。
	ZCount key min max          返回有序集 key 中， score 值在 min 和 max 之间(默认包括 score 值等于 min 或 max )的成员的数量。
	ZIncrBy key increment member   为有序集 key 的成员 member 的 score 值加上增量 increment 。 （负数：自减）。
	                            当 key 不存在，或 member 不是 key 的成员时， ZINCRBY key increment member 等同于 ZADD key increment member 。
	                            当 key 不是有序集类型时，返回一个错误。score 值可以是整数值或双精度浮点数。
	ZRange  key start stop [WITHSCORES]   返回有序集 key 中，指定区间内的成员。有序集成员按 score 值递增(从小到大)次序排列。
	ZRangeByScore  key min max [WITHSCORES] [LIMIT offset count]  返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。
	                            有序集成员按 score 值递增(从小到大)次序排列。
	ZRank key member            返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递增(从小到大)顺序排列。 排名以 0 为底，也就是说， score 值最小的成员排名为 0 。
	ZRem key member [member ...]    移除有序集 key 中的一个或多个成员，不存在的成员将被忽略。
	ZRemRangeByRank key start stop  移除有序集 key 中，指定排名(rank)区间内的所有成员。区间分别以下标参数 start 和 stop 指出，包含 start 和 stop 在内。
	ZRemRangeBYScore  key min max   移除有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。
	ZRevRange  key start stop [WITHSCORES]  返回有序集 key 中，指定区间内的成员。其中成员的位置按 score 值递减(从大到小)来排列。
	ZRevRangeByScore key max min [WITHSCORES] [LIMIT offset count]  返回有序集 key 中， score 值介于 max 和 min 之间(默认包括等于 max 或 min )的所有的成员。
	                            有序集成员按 score 值递减(从大到小)的次序排列。
	ZRevRank key member         返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递减(从大到小)排序。
	ZScore key member           返回有序集 key 中，成员 member 的 score 值。
	ZUnionStore destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]
	ZInterStore destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]
	ZRangeByLEX key min max [LIMIT offset count]
	ZLEXCount key min max       对于一个所有成员的分值都相同的有序集合键 key 来说， 这个命令会返回该集合中， 成员介于 min 和 max 范围内的元素数量。
	ZRemRangeByLEX key min max  对于一个所有成员的分值都相同的有序集合键 key 来说， 这个命令会移除该集合中， 成员介于 min 和 max 范围内的所有元素。

======================================================================================================================	
HyperLogLog
	PFAdd
	PFCount
	PFMerge
	
======================================================================================================================	
GEO（地理位置）
	GEOAdd
	GEOPos
	GEODist
	GEORadius
	GEORadiusByMember
	GEOHash
======================================================================================================================
Scan	SScan 	HScan 	ZScan	基于游标的迭代器（cursor based iterator）

Select num(redis数据库)
FlushDB
	

							
	
	